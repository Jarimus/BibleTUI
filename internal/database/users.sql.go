// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, api_key, created_at, updated_at)
VALUES (
    ?,
    ?,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
)
RETURNING id, name, api_key, created_at, updated_at
`

type CreateUserParams struct {
	Name   string
	ApiKey string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.ApiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
    WHERE name = ?
`

func (q *Queries) DeleteUser(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, name)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, api_key, created_at, updated_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ApiKey,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, name, api_key, created_at, updated_at FROM users
    WHERE name = ?
`

func (q *Queries) GetUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateApiKey = `-- name: UpdateApiKey :exec
UPDATE users
    SET api_key = ?
    WHERE name = ?
`

type UpdateApiKeyParams struct {
	ApiKey string
	Name   string
}

func (q *Queries) UpdateApiKey(ctx context.Context, arg UpdateApiKeyParams) error {
	_, err := q.db.ExecContext(ctx, updateApiKey, arg.ApiKey, arg.Name)
	return err
}
